#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
#ifndef USE_STANC3
#define USE_STANC3
#endif
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model69701ee920af__namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 43> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 12, column 2 to column 12)",
  " (in 'string', line 13, column 2 to column 10)",
  " (in 'string', line 14, column 2 to column 28)",
  " (in 'string', line 15, column 2 to column 28)",
  " (in 'string', line 16, column 2 to column 16)",
  " (in 'string', line 17, column 2 to column 16)",
  " (in 'string', line 18, column 2 to column 14)",
  " (in 'string', line 19, column 2 to column 14)",
  " (in 'string', line 20, column 2 to column 17)",
  " (in 'string', line 24, column 4 to column 59)",
  " (in 'string', line 25, column 4 to column 52)",
  " (in 'string', line 23, column 17 to line 26, column 3)",
  " (in 'string', line 23, column 2 to line 26, column 3)",
  " (in 'string', line 28, column 4 to column 35)",
  " (in 'string', line 29, column 4 to column 35)",
  " (in 'string', line 27, column 16 to line 30, column 3)",
  " (in 'string', line 27, column 2 to line 30, column 3)",
  " (in 'string', line 32, column 4 to column 102)",
  " (in 'string', line 31, column 16 to line 33, column 3)",
  " (in 'string', line 31, column 2 to line 33, column 3)",
  " (in 'string', line 34, column 2 to column 24)",
  " (in 'string', line 35, column 2 to column 22)",
  " (in 'string', line 36, column 2 to column 26)",
  " (in 'string', line 37, column 2 to column 26)",
  " (in 'string', line 38, column 2 to column 30)",
  " (in 'string', line 39, column 2 to column 30)",
  " (in 'string', line 2, column 2 to column 19)",
  " (in 'string', line 3, column 2 to column 19)",
  " (in 'string', line 4, column 2 to column 19)",
  " (in 'string', line 5, column 29 to column 30)",
  " (in 'string', line 5, column 2 to column 32)",
  " (in 'string', line 6, column 29 to column 30)",
  " (in 'string', line 6, column 2 to column 32)",
  " (in 'string', line 7, column 20 to column 21)",
  " (in 'string', line 7, column 2 to column 23)",
  " (in 'string', line 8, column 20 to column 21)",
  " (in 'string', line 8, column 2 to column 23)",
  " (in 'string', line 9, column 31 to column 32)",
  " (in 'string', line 9, column 2 to column 34)",
  " (in 'string', line 16, column 9 to column 10)",
  " (in 'string', line 17, column 9 to column 10)",
  " (in 'string', line 20, column 10 to column 13)"};
class model69701ee920af_ final : public model_base_crtp<model69701ee920af_> {
private:
  int K;
  int G;
  int T;
  std::vector<int> h;
  std::vector<int> a;
  std::vector<int> y1;
  std::vector<int> y2;
  std::vector<int> R;
  int c_1dim__;
public:
  ~model69701ee920af_() {}
  model69701ee920af_(stan::io::var_context& context__, unsigned int
                     random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model69701ee920af__namespace::model69701ee920af_";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 27;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 27;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "K", K, 2);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "G", "int",
        std::vector<size_t>{});
      G = std::numeric_limits<int>::min();
      current_statement__ = 28;
      G = context__.vals_i("G")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "G", G, 1);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "T", "int",
        std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      current_statement__ = 29;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("h", "G", G);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "h", "int",
        std::vector<size_t>{static_cast<size_t>(G)});
      h = std::vector<int>(G, std::numeric_limits<int>::min());
      current_statement__ = 31;
      h = context__.vals_i("h");
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "h", h, 0);
      current_statement__ = 31;
      stan::math::check_less_or_equal(function__, "h", h, T);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("a", "G", G);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "a", "int",
        std::vector<size_t>{static_cast<size_t>(G)});
      a = std::vector<int>(G, std::numeric_limits<int>::min());
      current_statement__ = 33;
      a = context__.vals_i("a");
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "a", a, 0);
      current_statement__ = 33;
      stan::math::check_less_or_equal(function__, "a", a, T);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("y1", "G", G);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "y1", "int",
        std::vector<size_t>{static_cast<size_t>(G)});
      y1 = std::vector<int>(G, std::numeric_limits<int>::min());
      current_statement__ = 35;
      y1 = context__.vals_i("y1");
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "y1", y1, 0);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("y2", "G", G);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "y2", "int",
        std::vector<size_t>{static_cast<size_t>(G)});
      y2 = std::vector<int>(G, std::numeric_limits<int>::min());
      current_statement__ = 37;
      y2 = context__.vals_i("y2");
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "y2", y2, 0);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("R", "G", G);
      current_statement__ = 39;
      context__.validate_dims("data initialization", "R", "int",
        std::vector<size_t>{static_cast<size_t>(G)});
      R = std::vector<int>(G, std::numeric_limits<int>::min());
      current_statement__ = 39;
      R = context__.vals_i("R");
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "R", R, 1);
      current_statement__ = 39;
      stan::math::check_less_or_equal(function__, "R", R, K);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("att", "T", T);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("def", "T", T);
      current_statement__ = 42;
      c_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 42;
      c_1dim__ = (K - 1);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("c", "K - 1", c_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + T + T + 1 + 1 + c_1dim__;
  }
  inline std::string model_name() const final {
    return "model69701ee920af_";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model69701ee920af__namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ home = DUMMY_VAR__;
      current_statement__ = 1;
      home = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 2;
      mu = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_att = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_att = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ sigma_def = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_def = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> att =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 5;
      att = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T);
      Eigen::Matrix<local_scalar_t__,-1,1> def =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 6;
      def = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T);
      local_scalar_t__ beta_1 = DUMMY_VAR__;
      current_statement__ = 7;
      beta_1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_2 = DUMMY_VAR__;
      current_statement__ = 8;
      beta_2 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> c =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(c_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      c = in__.template read_constrain_ordered<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, c_1dim__);
      {
        current_statement__ = 13;
        for (int g = 1; g <= G; ++g) {
          current_statement__ = 10;
          lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(
                           stan::model::rvalue(y1, "y1",
                             stan::model::index_uni(g)), (((mu + home) +
                           stan::model::rvalue(att, "att",
                             stan::model::index_uni(
                               stan::model::rvalue(h, "h",
                                 stan::model::index_uni(g))))) +
                           stan::model::rvalue(def, "def",
                             stan::model::index_uni(
                               stan::model::rvalue(a, "a",
                                 stan::model::index_uni(g)))))));
          current_statement__ = 11;
          lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(
                           stan::model::rvalue(y2, "y2",
                             stan::model::index_uni(g)), ((mu +
                           stan::model::rvalue(att, "att",
                             stan::model::index_uni(
                               stan::model::rvalue(a, "a",
                                 stan::model::index_uni(g))))) +
                           stan::model::rvalue(def, "def",
                             stan::model::index_uni(
                               stan::model::rvalue(h, "h",
                                 stan::model::index_uni(g)))))));
        }
        current_statement__ = 17;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 14;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(att, "att",
                             stan::model::index_uni(t)), 0, sigma_att));
          current_statement__ = 15;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(def, "def",
                             stan::model::index_uni(t)), 0, sigma_def));
        }
        current_statement__ = 20;
        for (int g = 1; g <= G; ++g) {
          current_statement__ = 18;
          lp_accum__.add(stan::math::ordered_logistic_lpmf<propto__>(
                           stan::model::rvalue(R, "R",
                             stan::model::index_uni(g)),
                           ((-(stan::model::rvalue(att, "att",
                                 stan::model::index_uni(
                                   stan::model::rvalue(h, "h",
                                     stan::model::index_uni(g)))) +
                           stan::model::rvalue(def, "def",
                             stan::model::index_uni(
                               stan::model::rvalue(a, "a",
                                 stan::model::index_uni(g))))) * beta_1) -
                           ((stan::model::rvalue(att, "att",
                               stan::model::index_uni(
                                 stan::model::rvalue(a, "a",
                                   stan::model::index_uni(g)))) +
                           stan::model::rvalue(def, "def",
                             stan::model::index_uni(
                               stan::model::rvalue(h, "h",
                                 stan::model::index_uni(g))))) * beta_2)), c));
        }
        current_statement__ = 21;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(home, 0, 10));
        current_statement__ = 22;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, 10));
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_1, 0, 10));
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_2, 0, 10));
        current_statement__ = 25;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma_att, 0, 2.5));
        current_statement__ = 26;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma_def, 0, 2.5));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model69701ee920af__namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double home = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      home = in__.template read<local_scalar_t__>();
      double mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      mu = in__.template read<local_scalar_t__>();
      double sigma_att = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma_att = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double sigma_def = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma_def = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> att =
        Eigen::Matrix<double,-1,1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      att = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T);
      Eigen::Matrix<double,-1,1> def =
        Eigen::Matrix<double,-1,1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      def = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T);
      double beta_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      beta_1 = in__.template read<local_scalar_t__>();
      double beta_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      beta_2 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> c =
        Eigen::Matrix<double,-1,1>::Constant(c_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      c = in__.template read_constrain_ordered<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, c_1dim__);
      out__.write(home);
      out__.write(mu);
      out__.write(sigma_att);
      out__.write(sigma_def);
      out__.write(att);
      out__.write(def);
      out__.write(beta_1);
      out__.write(beta_2);
      out__.write(c);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ home = DUMMY_VAR__;
      current_statement__ = 1;
      home = in__.read<local_scalar_t__>();
      out__.write(home);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 2;
      mu = in__.read<local_scalar_t__>();
      out__.write(mu);
      local_scalar_t__ sigma_att = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_att = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_att);
      local_scalar_t__ sigma_def = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_def = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_def);
      Eigen::Matrix<local_scalar_t__,-1,1> att =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(att,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(T),
        "assigning variable att");
      out__.write(att);
      Eigen::Matrix<local_scalar_t__,-1,1> def =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(def,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(T),
        "assigning variable def");
      out__.write(def);
      local_scalar_t__ beta_1 = DUMMY_VAR__;
      current_statement__ = 7;
      beta_1 = in__.read<local_scalar_t__>();
      out__.write(beta_1);
      local_scalar_t__ beta_2 = DUMMY_VAR__;
      current_statement__ = 8;
      beta_2 = in__.read<local_scalar_t__>();
      out__.write(beta_2);
      Eigen::Matrix<local_scalar_t__,-1,1> c =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(c_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(c,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(c_1dim__),
        "assigning variable c");
      out__.write_free_ordered(c);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "home", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sigma_att",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma_def",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "att", "double",
        std::vector<size_t>{static_cast<size_t>(T)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "def", "double",
        std::vector<size_t>{static_cast<size_t>(T)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "beta_1", "double",
        std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "beta_2", "double",
        std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "c", "double",
        std::vector<size_t>{static_cast<size_t>(c_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ home = DUMMY_VAR__;
      current_statement__ = 1;
      home = context__.vals_r("home")[(1 - 1)];
      out__.write(home);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 2;
      mu = context__.vals_r("mu")[(1 - 1)];
      out__.write(mu);
      local_scalar_t__ sigma_att = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_att = context__.vals_r("sigma_att")[(1 - 1)];
      out__.write_free_lb(0, sigma_att);
      local_scalar_t__ sigma_def = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_def = context__.vals_r("sigma_def")[(1 - 1)];
      out__.write_free_lb(0, sigma_def);
      Eigen::Matrix<local_scalar_t__,-1,1> att =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> att_flat__;
        current_statement__ = 5;
        att_flat__ = context__.vals_r("att");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(att, att_flat__[(pos__ - 1)],
            "assigning variable att", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(att);
      Eigen::Matrix<local_scalar_t__,-1,1> def =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> def_flat__;
        current_statement__ = 6;
        def_flat__ = context__.vals_r("def");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(def, def_flat__[(pos__ - 1)],
            "assigning variable def", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(def);
      local_scalar_t__ beta_1 = DUMMY_VAR__;
      current_statement__ = 7;
      beta_1 = context__.vals_r("beta_1")[(1 - 1)];
      out__.write(beta_1);
      local_scalar_t__ beta_2 = DUMMY_VAR__;
      current_statement__ = 8;
      beta_2 = context__.vals_r("beta_2")[(1 - 1)];
      out__.write(beta_2);
      Eigen::Matrix<local_scalar_t__,-1,1> c =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(c_1dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> c_flat__;
        current_statement__ = 9;
        c_flat__ = context__.vals_r("c");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= c_1dim__; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(c, c_flat__[(pos__ - 1)],
            "assigning variable c", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_ordered(c);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"home", "mu", "sigma_att",
                "sigma_def", "att", "def", "beta_1", "beta_2", "c"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(T)},
                std::vector<size_t>{static_cast<size_t>(T)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(c_1dim__)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "home");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigma_att");
    param_names__.emplace_back(std::string() + "sigma_def");
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      param_names__.emplace_back(std::string() + "att" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      param_names__.emplace_back(std::string() + "def" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "beta_1");
    param_names__.emplace_back(std::string() + "beta_2");
    for (int sym1__ = 1; sym1__ <= c_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "c" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "home");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigma_att");
    param_names__.emplace_back(std::string() + "sigma_def");
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      param_names__.emplace_back(std::string() + "att" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      param_names__.emplace_back(std::string() + "def" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "beta_1");
    param_names__.emplace_back(std::string() + "beta_2");
    for (int sym1__ = 1; sym1__ <= c_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "c" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"home\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_att\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_def\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"att\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"def\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"beta_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(c_1dim__) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"home\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_att\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_def\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"att\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"def\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"beta_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(c_1dim__) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((1 + 1) + 1) + 1) + T) + T) + 1) + 1)
      + c_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((1 + 1) + 1) + 1) + T) + T) + 1) + 1)
      + c_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model69701ee920af__namespace::model69701ee920af_;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model69701ee920af__namespace::profiles__;
}
#endif
#endif
